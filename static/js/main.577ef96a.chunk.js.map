{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TodoTextInput.js","components/Header.js","components/TodoItem.js","constants/TodoFilters.js","components/Footer.js","components/MainSection.js","containers/App.js","reducers/todos.js","reducers/index.js","index.js"],"names":["addTodo","text","type","deleteTodo","id","editTodo","completeTodo","TodoTextInput","state","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","className","classnames","edit","this","editing","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","handleSave","length","TodoItem","handleDoubleClick","element","todo","completedTodo","checked","completed","onDoubleClick","onClick","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","FILTER_TITLES","Footer","activeCount","itemWord","filter","title","selectedFilter","onShow","selected","style","cursor","completedCount","onClearCompleted","renderTodoCount","map","key","renderFilterLink","renderClearButton","TODO_FILTERS","MainSection","handleClearCompleted","actions","clearCompleted","handleShow","todos","completeAll","filteredTodos","reduce","count","renderToggleAll","renderFooter","connect","dispatch","bindActionCreators","TodoActions","initialState","rootReducer","combineReducers","action","maxId","Math","max","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.577ef96a.chunk.js","sourcesContent":["import * as types from '../constants/ActionTypes';\n\nexport const addTodo = text => ({ type: types.ADD_TODO, text });\nexport const deleteTodo = id => ({ type: types.DELETE_TODO, id });\nexport const editTodo = (id, text) => ({ type: types.EDIT_TODO, id, text });\nexport const completeTodo = id => ({ type: types.COMPLETE_TODO, id });\n","  \nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const COMPLETE_ALL = 'COMPLETE_ALL'\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED'","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default class TodoTextInput extends Component {\n    static propTypes = {\n        onSave: PropTypes.func.isRequired,\n        text: PropTypes.string,\n        placeholder: PropTypes.string,\n        editing: PropTypes.bool,\n        newTodo: PropTypes.bool,\n    };\n\n    state = {\n        text: this.props.text || '',\n    };\n\n    handleSubmit = e => {\n        const text = e.target.value.trim();\n        if (e.which === 13) {\n            this.props.onSave(text);\n            if (this.props.newTodo) {\n                this.setState({ text: '' });\n            }\n        }\n    };\n\n    handleChange = e => {\n        this.setState({ text: e.target.value });\n    };\n\n    handleBlur = e => {\n        if (!this.props.newTodo) {\n            this.props.onSave(e.target.value);\n        }\n    };\n    \n    render() {\n        return (\n            <input \n            className={classnames({\n                edit: this.props.editing,\n                'new-todo': this.props.newTodo,\n            })}\n            type=\"text\"\n            placeholder={this.props.placeholder}\n            autoFocus=\"true\"\n            value={this.state.text}\n            onBlur={this.handleBlur}\n            onChange={this.handleChange}\n            onKeyDown={this.handleSubmit}\n            />\n        );\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoTextInput from './TodoTextInput';\n\nexport default class Header extends Component {\n    static propTypes = {\n        addTodo: PropTypes.func.isRequired,\n    };\n\n    handleSave = text => {\n        if (text.length !== 0) {\n            this.props.addTodo(text);\n        }\n    };\n\n    render() {\n        return (\n            <header className=\"header\">\n                <h1>todos</h1>\n                <TodoTextInput\n                newTodo\n                onSave={this.handleSave}\n                placeholder=\"What needs to be done?\"\n                />\n            </header>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport TodoTextInput from './TodoTextInput';\n\nexport default class TodoItem extends Component {\n    static propTypes = {\n        todo: PropTypes.object.isRequired,\n        editTodo: PropTypes.func.isRequired,\n        deleteTodo: PropTypes.func.isRequired,\n        completeTodo: PropTypes.func.isRequired,\n    };\n    \n    state = {\n        editing: false,\n    };\n\n    handleDoubleClick = () => {\n        this.setState({ editing: true });\n    };\n\n    handleSave = (id, text) => {\n        if (text.length === 0) {\n            this.props.deleteTodo(id);\n        }\n        this.setState({ editing: false });\n    };\n\n    render() {\n        const { todo, completedTodo, deleteTodo } = this.props;\n\n        let element;\n        if (this.state.editing) {\n            element= (\n                <TodoTextInput\n                text={todo.text}\n                editing={this.state.editing}\n                onSave={text => this.handleSave(todo.id, text)}\n                />\n            );\n        }else {\n         element = (\n             <div className=\"view\">\n                 <input\n                    className=\"toggle\"\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => completedTodo(todo.id)}\n                    />\n                    <label onDoubleClick={this.handleDoubleClick}>{todo.text}</label>\n                    <button className=\"destroy\" onClick={() => deleteTodo(todo.id)} />\n             </div>\n            );\n        }\n\n        return (\n            <li\n            className={classnames({\n                completed: todo.completed,\n                editing: this.state.editing,\n            })}\n            >\n            {element}\n            </li>\n        );\n    }\n}","export const SHOW_ALL = 'show_all'\nexport const SHOW_COMPLETED = 'show_completed'\nexport const SHOW_ACTIVE = 'show_active'\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport {\n    SHOW_ALL,\n    SHOW_COMPLETED,\n    SHOW_ACTIVE,\n} from '../constants/TodoFilters';\n\nconst FILTER_TITLES = {\n    [SHOW_ALL]: 'All',\n    [SHOW_ACTIVE]: 'Active',\n    [SHOW_COMPLETED]: 'Completed',\n};\n\nexport default class Footer extends Component {\n    static propTypes = {\n        completedCount: PropTypes.number.isRequired,\n        activeCount: PropTypes.number.isRequired,\n        filter: PropTypes.string.isRequired,\n        onClearCompleted: PropTypes.func.isRequired,\n        onShow: PropTypes.func.isRequired,\n    };\n\n    renderTodoCount() {\n        const { activeCount } = this.props;\n        const itemWord = activeCount === 1 ? 'item' : 'items';\n\n        return (\n            <span className=\"todo-count\">\n                <strong>{activeCount || 'No'}</strong> {itemWord} left\n            </span>\n        );\n    }\n\n    renderFilterLink(filter) {\n        const title = FILTER_TITLES[filter];\n        const { filter: selectedFilter, onShow } = this.props;\n\n        return (\n            <a\n            className={classnames({ selected: filter === selectedFilter })}\n            style={{ cursor: 'pointer' }}\n            onClick={() => onShow(filter)}\n          >\n            {title}\n          </a>\n    \n        );\n    }\n\n    renderClearButton() {\n        const { completedCount, onClearCompleted } = this.props;\n        if (completedCount > 0) {\n            return (\n                <button className=\"clear-completed\" onClick={onClearCompleted}>\n                    Clear completed\n                </button>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <footer className=\"footer\">\n                {this.renderTodoCount()}\n                <ul className=\"filters\">\n                    {[SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED].map(filter =>(\n                        <li key={filter}>{this.renderFilterLink(filter)}</li>\n                    ))}\n                </ul>\n                {this.renderClearButton()}\n            </footer>\n        );\n    }\n\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from './TodoItem';\nimport {\n    SHOW_ALL,\n    SHOW_COMPLETED,\n    SHOW_ACTIVE,\n} from '../constants/TodoFilters';\nimport Footer from './Footer';\n\nconst TODO_FILTERS = {\n    [SHOW_ALL]: () => true,\n    [SHOW_ACTIVE]: todo => !todo.completed,\n    [SHOW_COMPLETED]: todo => todo.completed,\n};\n\nexport default class MainSection extends Component {\n    static propTypes = {\n        todos: PropTypes.array.isRequired,\n        actions: PropTypes.object.isRequired,\n    };\n\n    state = { filter: SHOW_ALL };\n\n    handleClearCompleted = () => {\n        this.props.actions.clearCompleted();\n    };\n\n    handleShow = filter => {\n        this.setState({ filter });\n    };\n\n    renderToggleAll(completedCount) {\n        const { todos, actions } = this.props;\n        if (todos.length > 0) {\n            return (\n                <input \n                className=\"toggle-all\"\n                type=\"checkbox\"\n                checked={completedCount === todos.length}\n                onChange={actions.completeAll}\n                />\n            );\n        }\n    }\n\n    renderFooter(completedCount) {\n        const { todos } = this.props;\n        const { filter } = this.state;\n        const activeCount = todos.length - completedCount;\n\n        if (todos.length) {\n            return (\n                <Footer\n                completedCount={completedCount}\n                activeCount={activeCount}\n                filter={filter}\n                onClearCompleted={this.handleClearCompleted}\n                onShow={this.handleShow}\n                />\n            );\n        }\n    }\n\n    render() {\n        const { todos, actions } = this.props;\n        const { filter } = this.state;\n\n        const filteredTodos = todos.filter(TODO_FILTERS[filter]);\n        const completedCount = todos.reduce(\n            (count, todo) => (todo.completed ? count +1 : count),\n            0,\n        );\n\n        return (\n          <section className=\"main\">\n              {this.renderToggleAll(completedCount)}\n              <ul className=\"todo-list\">\n                  {filteredTodos.map(todo => (\n                      <TodoItem key={todo.id} todo={todo} {...actions} />\n                  ))}\n              </ul>\n              {this.renderFooter(completedCount)}\n          </section>\n        );\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\n\nimport * as TodoActions from '../actions';\nimport Header from '../components/Header';\nimport MainSection from '../components/MainSection';\n\nconst App = ({ todos, actions }) => (\n    <div>\n    <Header addTodo={actions.addTodo} />\n    <MainSection todos={todos} actions={actions} />\n    </div>\n);\n\n    App.propTypes = {\n        todos: PropTypes.array.isRequired,\n    };\n\n    const mapStateToProps = state => ({\n        todos: state.todos,\n    });\n\n    const mapDispatchToProps = dispatch => ({\n        actions: bindActionCreators(TodoActions, dispatch),\n    });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { ADD_TODO, DELETE_TODO, EDIT_TODO, COMPLETE_TODO } from '../constants/ActionTypes';\nconst initialState = [\n  {\n    text: 'Use Redux',\n    completed: false,\n    id: 0,\n  },\n];\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text,\n        },\n      ];\n      case DELETE_TODO:\n        return state.filter(todo => todo.id !== action.id);\n\n      case EDIT_TODO:\n        return state.map(\n          todo => (todo.id === action.id ? { ...todo, text: action.text} : todo),\n        );\n        \n      case COMPLETE_TODO:\n        return state.map(\n          todo =>\n            todo.id === action.id\n              ? { todo, completed: !todo.completed }\n              : todo,\n        );\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport todos from './todos';\n\nconst rootReducer = combineReducers({\n    todos,\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport 'todomvc-app-css/index.css';\n\nimport App from './containers/App';\nimport reducer from './reducers';\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}